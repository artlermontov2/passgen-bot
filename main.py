import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
import generator as gen

load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def start_func(message: types.Message):
    await_text = (
        f'üëã–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è!\n\n'
        f'‚ú≥–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n'
        f'–ü–∞—Ä–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏ –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É 8 —Å–∏–º–≤–æ–ª–æ–≤ üëâ /pass\n\n'
        f'‚úÖ–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å:\n'
        f'‚úÖup -  –¥–æ–±–∞–≤–∏—Ç –±—É–∫–≤—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.\n'
        f'‚úÖnum - –¥–æ–±–∞–≤–∏—Ç —Ü–∏—Ñ—Ä—ã.\n'
        f'‚úÖspec - –¥–æ–±–∞–≤–∏—Ç —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã.\n'
        f'‚úÖ—Ç–∞–∫ –∂–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω–Ω—É –ø–∞—Ä–æ–ª—è, –¥–æ–±–∞–≤–∏–≤ –∫ –ø—Ä–∏–º–µ—Ä—É: 12.\n\n'
        f'‚ú¥–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n'
        f'‚ú¥"up num 12" - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç,\n'
        f'—á—Ç–æ –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–≤–æ–ª—ã –≤ –Ω–∏–∂–Ω–µ–º –∏ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ,\n'
        f'—Ü–∏—Ñ—Ä—ã, –∏ –¥–ª–∏–Ω–Ω–∞ –µ–≥–æ –±—É–¥—Ç —Ä–∞–≤–Ω–∞ 12 —Å–∏–º–≤–æ–ª–∞–º.\n\n'
        f'‚Äº–í–∞–∂–Ω–æ: –º–µ–∂–¥—É –≤–≤–æ–¥–æ–º –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω '
        f'—Å—Ç–æ—è—Ç—å –ø—Ä–æ–±–µ–ª, –∏–Ω–∞—á–µ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã.'
    )
    await message.answer(await_text)


@dp.message_handler(commands=['pass'])
async def defualt_pass(message: types.Message):
    await message.answer(gen.password(gen.pars_msg('')))


@dp.message_handler()
async def gen_pass(message: types.Message):
    msg = gen.pars_msg(message.text)
    await message.answer(gen.password(msg))

    
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)